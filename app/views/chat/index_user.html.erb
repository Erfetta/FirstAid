<!DOCTYPE html>
<html lang="it">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat tra Utente e Operatore</title>
</head>

<style>
  .chat-box {
    height: 100%;
    width: 100%;
    border: 1px solid #ccc;
    border-radius: 10px;
    overflow: hidden;
    display: flex;
    flex-direction: column;
  }
  .chat-section{
    height: calc(100% - 50px);
    overflow-y: auto;
    margin: 10px;
    margin-top: 30px;
  }

  .message {
    max-width: 60%;
    margin-bottom: 10px;
    padding: 10px;
    border-radius: 10px;
    position: relative;
  }
  .current-message {
    background-color: lightblue;
    margin-left: auto; /* Posizione a destra */
    text-align: right; /* Allinea il testo a destra */
  }
  .other-message {
    background-color: lightgreen;
    margin-right: auto; /* Posizione a sinistra */
    text-align: left; /* Allinea il testo a sinistra */
  }

  .chat-form-container{
    height: 50px;
    background-color: #333;
  }
  .chat-form-container form{
    height: 100%;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    gap:1rem;
  }
  .chat-form-container input{
    width: 40%;
    height: 30px;
    padding: 0 1rem;
    border-radius: 10px;
  }
  .chat-form-container button{
    width: 80px;
    height: 30px;
    border-radius: 10px;
  }
  .buttonToHome{
    display: flex;
    margin: 10px;
  }
</style>

<body>
  
  <div class="chat-box">
    <%= link_to 'Torna alla Home', root_path, class: 'buttonToHome' %>
    <!-- Area messaggi -->
    <div class="chat-section" id="messages"></div>

    <!-- Form per inviare un nuovo messaggio -->
    <div class="chat-form-container">
      <form id="chat-form">
        <input type="text" id="message-input" placeholder="Scrivi un messaggio" required>
        <button type="submit">Invia</button>
      </form>
    </div>
  </div>
</body>

<script type="module">
 
  import { initializeApp } from 'https://www.gstatic.com/firebasejs/9.19.1/firebase-app.js';
  import { getDatabase, ref, push, onValue } from 'https://www.gstatic.com/firebasejs/9.19.1/firebase-database.js';

  const firebaseConfig = {
    apiKey: "AIzaSyAtyI56iKeFrVoo3UnoadYqUsK5uv_DHEU",
    authDomain: "firstaidchat.firebaseapp.com",
    databaseURL: "https://firstaidchat-default-rtdb.europe-west1.firebasedatabase.app",
    projectId: "firstaidchat",
    storageBucket: "firstaidchat.firebasestorage.app",
    messagingSenderId: "842153800095",
    appId: "1:842153800095:web:7115d88af786b85ba84daa",
    measurementId: "G-923GDNFVBT"
  };
  
  const app = initializeApp(firebaseConfig);
  const database = getDatabase(app);

  const reportId = '<%= @report_id %>'; // Inietta l'ID del report come variabile JavaScript
  listenForMessages(reportId); // Avvia lâ€™ascolto dei messaggi per questo report

  // Funzione per inviare un messaggio
  function sendMessage(message, senderType, reportId) {
  console.log("Invio messaggio:", message, "Tipo:", senderType, "Report ID:", reportId); // Aggiungi questo log
  const messagesRef = ref(database, 'messages');
  push(messagesRef, {
    text: message,
    senderType: senderType, 
    timestamp: Date.now(),
    reportId: reportId
  })
  .then(() => {
    console.log("Messaggio inviato con successo");
  })
  .catch((error) => {
    console.error("Errore durante l'invio del messaggio:", error);
  });
}


  // Funzione per ascoltare i messaggi
  function listenForMessages(reportId) {
    const messagesRef = ref(database, 'messages');
    onValue(messagesRef, (snapshot) => {
      const messages = snapshot.val();
      const messagesContainer = document.getElementById('messages');
      messagesContainer.innerHTML = '';

      if (messages) {
        for (let id in messages) {
          const message = messages[id];
          if (message.reportId === reportId) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('message');

            if (message.senderType === 'user') {
              messageDiv.classList.add('current-message'); 
            } else if (message.senderType === 'operator') {
              messageDiv.classList.add('other-message'); 
            }

            messageDiv.textContent = `${new Date(message.timestamp).toLocaleTimeString()}: ${message.text}`;
            messagesContainer.appendChild(messageDiv);
          }
        }
      } else {
        console.log('Nessun messaggio trovato per questo report');
      }
    });
  }

  // Evento per inviare il messaggio
  const chatForm = document.getElementById('chat-form');
  chatForm.addEventListener('submit', function(event) {
    event.preventDefault();
    const messageInput = document.getElementById('message-input');
    const messageText = messageInput.value.trim();

    if (messageText) {
      const senderType = 'user';
      sendMessage(messageText, senderType, reportId);
      messageInput.value = '';
    }
  });




function checkReportExists(reportId) {
  fetch(`/reports/${reportId}/exists`)
    .then((response) => response.json())
    .then((data) => {
      if (data.exists) {
        console.log("Report trovato");
      } else {
        console.log("Report non trovato");
        clearInterval(checkInterval); // Ferma i controlli
        window.location.href = '/'; // Cambia con il tuo percorso
      }
    })
    .catch((error) => {
      console.error("Errore durante la verifica del report:", error);
    });
}

const checkInterval = setInterval(() => {
  checkReportExists(reportId);
}, 500);





</script>

</html>
