<!DOCTYPE html>
<html lang="it">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat tra Utente e Operatore</title>
</head>

<style>
  #messages {
    max-height: 400px;
    overflow-y: auto;
    border: 1px solid #ccc;
    padding: 10px;
    margin-top: 20px;
}

.message {
  max-width: 60%;
  margin-bottom: 10px;
  padding: 10px;
  border-radius: 10px;
  position: relative;
}

.current-message {
  background-color: lightblue;
  margin-left: auto; /* Posizione a destra */
  text-align: right; /* Allinea il testo a destra */
}

.other-message {
  background-color: lightgreen;
  margin-right: auto; /* Posizione a sinistra */
  text-align: left; /* Allinea il testo a sinistra */
}
</style>

<body>
<!-- Mostra i messaggi -->
<div id="messages"></div>

<!-- Form per inviare un nuovo messaggio -->
<form id="chat-form">
  <input type="text" id="message-input" placeholder="Scrivi un messaggio" required>
  <button type="submit">Invia</button>
</form>

<%= link_to 'Torna alla Home', root_path, class: 'button' %>
</body>

<script type="module">
  import { initializeApp } from 'https://www.gstatic.com/firebasejs/9.19.1/firebase-app.js';
  import { getDatabase, ref, push, onValue } from 'https://www.gstatic.com/firebasejs/9.19.1/firebase-database.js';

  const firebaseConfig = {
    apiKey: "AIzaSyAtyI56iKeFrVoo3UnoadYqUsK5uv_DHEU",
    authDomain: "firstaidchat.firebaseapp.com",
    databaseURL: "https://firstaidchat-default-rtdb.europe-west1.firebasedatabase.app",
    projectId: "firstaidchat",
    storageBucket: "firstaidchat.firebasestorage.app",
    messagingSenderId: "842153800095",
    appId: "1:842153800095:web:7115d88af786b85ba84daa",
    measurementId: "G-923GDNFVBT"
  };

  const app = initializeApp(firebaseConfig);
  const database = getDatabase(app);

  // Funzione per inviare un messaggio
function sendMessage(message, senderType, reportId) {
  const messagesRef = ref(database, 'messages');
  push(messagesRef, {
    text: message,
    senderType: senderType, 
    timestamp: Date.now(),
    reportId: reportId
  });
}


  // Funzione per ascoltare i messaggi
  function listenForMessages(reportId) {
  const messagesRef = ref(database, 'messages');
  
  // Aggiungi un filtro per l'ID del report
  onValue(messagesRef, (snapshot) => {
    const messages = snapshot.val();
    const messagesContainer = document.getElementById('messages');
    messagesContainer.innerHTML = ''; // Pulisce i messaggi esistenti

    if (messages) {
      for (let id in messages) {
        const message = messages[id];
        
        // Filtra i messaggi in base al reportId
        if (message.reportId === reportId) {
          const messageDiv = document.createElement('div');
          messageDiv.classList.add('message'); // Applica la classe generica per il messaggio

          // Determina da chi proviene il messaggio e applica la classe corrispondente
          if (message.senderType === 'user') {
            messageDiv.classList.add('current-message'); 
          } else if (message.senderType === 'operator') {
            messageDiv.classList.add('other-message'); 
          }

          messageDiv.textContent = `${new Date(message.timestamp).toLocaleTimeString()}: ${message.text}`;
          messagesContainer.appendChild(messageDiv);
        }
      }
    } else {
      console.log('Nessun messaggio trovato per questo report');
    }
  });
}


  const reportId = '<%= @report_id %>';
listenForMessages(reportId); // Ascolta solo i messaggi per questo report


  // Aggiungi un evento al form per inviare il messaggio
const chatForm = document.getElementById('chat-form');
chatForm.addEventListener('submit', function(event) {
  event.preventDefault();  // Evita il comportamento predefinito del form (ricarica pagina)
  const messageInput = document.getElementById('message-input');
  const messageText = messageInput.value.trim();
  
  const reportId = '<%= @report_id %>'; // L'ID del report corrente, che puoi ottenere dinamicamente

  if (messageText) {
    const senderType = 'user';  // Cambia dinamicamente se sei un operatore
    sendMessage(messageText, senderType, reportId);  // Invia il messaggio
    messageInput.value = '';  // Pulisce il campo di input dopo l'invio
  }
});

</script>

</html>
