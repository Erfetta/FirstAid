<!DOCTYPE html>
<!-- Coding By CodingNepal - codingnepalweb.com -->
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <!-- CSS -->     
        <!-- Boxicons CSS -->
        <link href='https://unpkg.com/boxicons@2.1.2/css/boxicons.min.css' rel='stylesheet'>
        
    </head>
    <body>
        <body class="body_user <%= @theme %>-theme">
        <div class="map-container_user" id="map">
            <!-- div per il render di google maps -->
            <script src="https://maps.googleapis.com/maps/api/js?key=<%=ENV['GOOGLE_MAPS_API_KEY']%>&callback=initMap&v=weekly" defer></script>
        </div>


        <% if @report_pending.present? %>
    <!-- Modal per la recensione -->
    <div id="review-modal">
        <div class="modal-content">
        <!-- Pulsante per chiudere la modale -->
        <span id="close-review-modal" class="close">&times;</span>
        
        <h2>Recensione</h2>

        <%= form_with url: review_path, method: :post, remote: true, id: "review-form" do |form| %>
        <div>
            <label for="rating">Rating (da 1 a 5):</label>
            <%= form.select :rating, options_for_select([1, 2, 3, 4, 5]), { include_blank: "Scegli un rating" }, id: "rating" %>
        </div>

        <div>
            <label for="review_text">Recensione:</label>
            <%= form.text_area :review_text, id: "review_text" %>
        </div>

        <%= form.submit "Salva Recensione" %>
        <% end %>

        </div>
    </div>
    <% end %>



    <!-- Tre bottoni sotto la mappa -->
    <div class="button-container_user">
        <%= link_to tutorial_path, class: 'button_user small-button_user' do %>
            <i class='bx bxs-book'></i> <!-- Icona del libro -->
            <% end %>
         <% if @report_exists %>
            <!-- Se il report esiste ed aveva chat come metodo di contatto, mostra il bottone per accedere alla chat -->
            <%= link_to chat_path(report_id: @user_report.id), class: 'button_user large-button_user' do %>
                <i class="bx bx-chat"></i> <!-- Icona della chat -->
            <% end %>
            <% else %>
            <!-- Se il report non esiste, mostra il bottone per creare un nuovo report -->
            <%= link_to new_path, class: 'button_user large-button_user' do %>
                <i class="bx bxs-error"></i> <!-- Icona di creazione -->
            <% end %>
            <% end %>
            <%= link_to option_path, class: 'button_user small-button_user' do %>
            <i class='bx bx-menu'></i> <!-- Icona del menu -->
            <% end %>
        
    </div>
        
        <nav class="nav_user">
            <ul class="nav_user-content">
                <li class="nav_user-list">
                    <%= link_to setting_path, class: "link-item user #{'active' if current_page?(setting_path)}" do %>
                        <i class='bx bxs-cog link-icon'></i>
                        <span class="link-text">Settings</span>
                    <% end %>
                </li>
                <li class="nav_user-list">
                    <%= link_to root_path, class: "link-item user #{'active' if current_page?(root_path)}" do %>
                        <i class='bx bxs-home link-icon user'></i>
                        <span class="link-text user">Home</span>
                    <% end %>
                </li>
                <li class="nav_user-list">
                    <%= link_to profile_path, class: "link-item user #{'active' if current_page?(profile_path)}" do %>
                        <i class='bx bxs-user link-icon'></i>
                        <span class="link-text">Profile</span>
                    <% end %>
                </li>
                <span class="indicator_user"></span>
            </ul>
        </nav>
        

        <!-- JavaScript -->
         <script>
            document.addEventListener("DOMContentLoaded", () => {
  const linkItems = document.querySelectorAll(".link-item");
  const indicator = document.querySelector(".indicator_user");
  const modal = document.getElementById("review-modal");
  const closeButton = document.getElementById("close-review-modal");
  const ratingSelect = document.getElementById("rating");
  const reviewForm = document.getElementById("review-form"); // Seleziona il form

  // Debug: Verifica se la modale viene trovata correttamente
  console.log("Modal trovato:", modal);

  function updateIndicator() {
    const activeItem = document.querySelector(".link-item.active");
    if (activeItem) {
      const { offsetLeft, offsetWidth } = activeItem;
      indicator.style.left = `${offsetLeft + (offsetWidth / 2)}px`;
    }
  }

  linkItems.forEach((linkItem) => {
    linkItem.addEventListener("click", () => {
      document.querySelector(".link-item.active")?.classList.remove("active");
      linkItem.classList.add("active");
      updateIndicator();
    });
  });

  updateIndicator();
  window.addEventListener("resize", updateIndicator);

  // Debug: Verifica che il report sia presente
  const reportPending = <%= @report_pending.present? %>;
  console.log("Report pending:", reportPending);
  
  if (reportPending) {
    modal.style.display = "block";
  }

  // Quando si clicca sulla "X", chiudi la modale e imposta il rating a -1
  closeButton.addEventListener("click", function() {
    modal.style.display = "none";
    console.log("X cliccata: la modale è stata chiusa.");

    // Imposta il valore del rating a -1
    if (ratingSelect) {
      ratingSelect.value = -1; // Impostiamo il valore selezionato a -1
      console.log("Rating impostato a:", ratingSelect.value);
    }

    // Invia il form dopo aver chiuso la modale
    reviewForm.submit(); // Aggiungi questa riga per inviare il form
  });

  // Gestione della chiusura della modale cliccando fuori dal contenitore
  window.addEventListener("click", function(event) {
    if (event.target === modal) {
      modal.style.display = "none";
      console.log("Cliccato fuori dalla modale: la modale è stata chiusa.");

      // Imposta il valore del rating a -1
      if (ratingSelect) {
        ratingSelect.value = -1; // Impostiamo il valore del rating a -1
        console.log("Rating impostato a:", ratingSelect.value);
      }

      // Invia il form dopo aver chiuso la modale
      reviewForm.submit(); // Aggiungi questa riga per inviare il form
    }
  });
});

        </script>
    </div>
    </body>
    <script>
        // google maps
        let map, marker;

        function initMap() {
            map = new google.maps.Map(document.getElementById("map"), {
                zoom: 10,
                center: { lat: 41.86, lng: 12.56 }, // Default center, will be adjusted later
                fullscreenControl: false, // Disables fullscreen control
                streetViewControl: false, // Disables street view control
                mapTypeControl: false // Disables map type control
            });

            // Try HTML5 geolocation.
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        const pos = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude,
                        };
                        marker = new google.maps.Marker({
                            position: pos,
                            map: map,
                            title: "You are here"
                        });
                        map.setCenter(pos);
                        console.log(pos);
                    },
                    () => {
                        handleLocationError(true, map.getCenter());
                    }
                );
            } else {
                // Browser doesn't support Geolocation
                handleLocationError(false, map.getCenter());
            }
        }

        function handleLocationError(browserHasGeolocation, pos) {
            const content = browserHasGeolocation
                ? "Error: The Geolocation service failed."
                : "Error: Your browser doesn't support geolocation.";
            const infoWindow = new google.maps.InfoWindow({
                position: pos,
                content: content,
            });
            infoWindow.open(map);
        }

        window.onload = initMap;

    </script>
</html>